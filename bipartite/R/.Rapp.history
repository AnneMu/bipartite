require(bipartite)
vaznull <- function(N, web){#
  web <- as.matrix(empty(web)) #
  vaznull.fast <- function(web){#
   rs.p <- rowSums(web)/sum(web)#
   cs.p <- colSums(web)/sum(web)#
   P <- P1 <- tcrossprod(rs.p, cs.p)#
   int.remain <- sum(web)#
   while (int.remain > 0){#
     finalmat <- matrix(0, nrow(web), ncol(web))#
     n.int.finalmat <- 0#
     while (n.int.finalmat < sum(dim(web))){#
       sel <- sample(1:length(web), 1,  prob=P, replace=TRUE)#
       selc <- floor((sel-1)/(dim(web)[1])) + 1#
       selr <- ((sel-1) %% dim(web)[1]) + 1#
       if ( sum(finalmat[,selc]) == 0 | sum(finalmat[selr,]) == 0 ){#
         finalmat[sel] <- 1#
         P[sel] <- 0#
       }#
       n.int.finalmat <- sum(rowSums(finalmat) > 0) + sum(colSums(finalmat) > 0) #
     }#
     conn.remain <- sum(web > 0) - sum(finalmat > 0)#
     if (conn.remain > 0) {#
       add <- sample(which(finalmat == 0), conn.remain, prob=P1[finalmat == 0])#
       finalmat[add] <- 1#
     }#
     if (sum(finalmat > 0)/prod(dim(finalmat)) > sum(web > 0)/prod(dim(web)) | any(rowSums(finalmat) > rowSums(web))  |  any(colSums(finalmat) > colSums(web))) next #
     int.remain <- int.remain.initial <- sum(web) - sum(finalmat)#
     i = 1#
     while (int.remain > 0 & i < (int.remain.initial +1)){#
       row.options <- which(rowSums(finalmat) < rowSums(web))#
       col.options <- which(colSums(finalmat) < colSums(web))#
       putting.options <- which(finalmat >= 0, arr.ind=TRUE)#
       real.options <- which(putting.options[,1] %in% row.options & putting.options[,2] %in% col.options)#
       add <- sample(real.options, length(real.options))        #
       finalmat2 <- finalmat#
       finalmat2[putting.options[add[1], 1], putting.options[add[1], 2]] <- finalmat2[putting.options[add[1], 1], putting.options[add[1], 2]] + 1#
	   if (all(rowSums(finalmat2) <= rowSums(web)) & all(colSums(finalmat2) <= colSums(web)) & sum(finalmat > 0)/prod(dim(finalmat)) > sum(web > 0)/prod(dim(web))){#
	  	  finalmat <- finalmat2#
	  	  int.remain <- sum(web) - sum(finalmat)#
	  	  print("a successful filling")#
	   } else {print("an unsuccessful filling"); break} #
    if (sum(finalmat > 0)/prod(dim(finalmat)) == sum(web > 0)/prod(dim(web)) & all(rowSums(finalmat) == rowSums(web))  &  all(colSums(finalmat) == colSums(web))) print("done!") else print("added a point");#
    }#
   }#
	finalmat#
  }#
  replicate(N, vaznull.fast(web), simplify=FALSE)#
#
}
vaznull(1, Safariland)
vaznull
rm(vaznull)
vaznull
mgen <- function(web, n=sum(web), keep.species=TRUE, rep.cell=TRUE, autotransform="sum", trials=100){#
  if (sum(web) != 1) { #
  	message(paste("This is not a probability matrix! I will proceed after transforming the entries according to option 'autotransform':", autotransform, "!"))#
  	if (autotransform == "sum") {#
  		m <- web/sum(web)#
  	} else {#
  		m <- (rowSums(web)/sum(web)) %*% t(colSums(web)/sum(web))#
  	}#
  } else m <- web#
  if (rep.cell == FALSE & n > (nrow(m)*ncol(m))){#
    message("Argument n should be smaller than the number of cells in matrix!")#
  }#
  else{#
    mac <- matrix(cumsum(m),nrow(m),ncol(m)) #
    mint <- matrix(0,nrow(m),ncol(m)) #
    if (keep.species){#
      for (i in 1:nrow(m)){#
        c1 <- sample(ncol(m), replace=TRUE, prob=colSums(m))#
        c1 <- c1[1]#
        mint[i, c1] <- 1#
      }#
      for (i in 1:ncol(m)){#
        if(sum(mint[,i]) == 0){#
          r1 <- sample(nrow(m), replace=TRUE, prob=rowSums(m))#
          r1 <- r1[1] #
          mint[r1, i] <- 1#
        }#
      }#
    }#
    while.counter <- 0#
    while (sum(mint) < n){#
      rand <- runif(1, 0, 1)#
      ri <- min(which(mac >= rand))#
      if (rep.cell == TRUE) mint[ri] <- mint[ri] + 1#
      if (rep.cell == FALSE) mint[ri] <- 1#
      while.counter <- while.counter + 1#
      if (while.counter >= trials*n) stop("Cannot allocate the requested interactions in a reasonable amount of time! \n Either increase 'trials' or decrease 'n'.")#
    }#
    mint#
  }#
}
mgen(web=Safariland)
require(bipartite)
mgen(web=Safariland)
mgen(web=Safariland/sum(Safariland), n=200, rep.cell=F)
probmat <- matrix(1/100,10,10)#
mgen(web=probmat, n=100)#
obs.mat <- matrix(c(1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0),5,5)#
rs <- rowSums(obs.mat)#
cs <- colSums(obs.mat)#
web <- rs %*% t(cs)#
web <- web/sum(web)#
n = sum(obs.mat)#
mgen(web, n, keep.species=FALSE, rep.cell=FALSE) #
mgen(web, n, keep.species=TRUE, rep.cell=FALSE)
mgen(mosquin1967, keep.species=FALSE, rep.cell=TRUE)
mgen(mosquin1967, keep.species=TRUE, rep.cell=TRUE)
mgen <- function(web, n=sum(web), keep.species=TRUE, rep.cell=TRUE, autotransform="sum", trials=100){#
  if (sum(web) != 1) { #
  	message(paste("This is not a probability matrix! I will proceed after transforming the entries according to option 'autotransform':", autotransform, "!"))#
  	if (autotransform == "sum") {#
  		m <- web/sum(web)#
  	} else {#
  		m <- (rowSums(web)/sum(web)) %*% t(colSums(web)/sum(web))#
  	}#
  } else m <- web#
  if (rep.cell == FALSE & n > (nrow(m)*ncol(m))){#
    message("Argument n should be smaller than the number of cells in matrix!")#
  }#
  else{#
    mac <- matrix(cumsum(m),nrow(m),ncol(m)) #
    mint <- matrix(0,nrow(m),ncol(m)) #
    if (keep.species){#
      for (i in 1:nrow(m)){#
        c1 <- sample(ncol(m), replace=TRUE, prob=colSums(m))#
        c1 <- c1[1]#
        mint[i, c1] <- 1#
      }#
      for (i in 1:ncol(m)){#
        if(sum(mint[,i]) == 0){#
          r1 <- sample(nrow(m), replace=TRUE, prob=rowSums(m))#
          r1 <- r1[1] #
          mint[r1, i] <- 1#
        }#
      }#
    }#
    while.counter <- 0#
    while (sum(mint) < n){#
      rand <- runif(1, 0, 1)#
      ri <- min(which(mac >= rand))#
      if (rep.cell == TRUE) mint[ri] <- mint[ri] + 1#
      if (rep.cell == FALSE) mint[ri] <- 1#
      while.counter <- while.counter + 1#
      if (while.counter >= trials*n) stop("Cannot allocate the requested interactions in a reasonable amount of time! \n Either increase 'trials' or decrease 'n'.")#
    }#
    mint#
  }#
}
mgen(mosquin1967, keep.species=TRUE, rep.cell=TRUE)
mgen(mosquin1967, keep.species=TRUE, rep.cell=F)
obs.mat <- matrix(c(1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0), 5, 5)#
rs <- rowSums(obs.mat)#
cs <- colSums(obs.mat)#
web <- rs %*% t(cs)#
web <- web/sum(web)#
n = sum(obs.mat)#
mgen(web, n, keep.species=FALSE, rep.cell=FALSE) #
mgen(web, n, keep.species=TRUE, rep.cell=FALSE)
obs.mat <- matrix(c(1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0), 5, 5)#
rs <- rowSums(obs.mat)#
cs <- colSums(obs.mat)#
web <- rs %*% t(cs)#
web <- web/sum(web)#
n = sum(obs.mat)#
mgen(web, n, keep.species=FALSE, rep.cell=FALSE) #
mgen(web, n, keep.species=TRUE, rep.cell=FALSE)
